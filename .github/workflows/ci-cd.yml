name: CI/CD Pipeline for Solar System Microservice

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: stage-eks-cluster
  DOCKER_IMAGE_NAME: solar-system

jobs:
  # Job 1: Build and Test Application
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Generate coverage report
      run: npm run coverage

  # Job 2: Build and Push Docker Image
  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Terraform Infrastructure
  terraform:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: terraform
    outputs:
      cluster-name: ${{ steps.terraform-output.outputs.cluster_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.5"

    - name: Generate SSH key pair
      run: |
        ssh-keygen -t rsa -b 4096 -f ./id_rsa -N ""
        chmod 600 ./id_rsa
        chmod 644 ./id_rsa.pub

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.action != 'destroy'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Get Terraform Outputs
      if: github.event.inputs.action != 'destroy'
      id: terraform-output
      run: |
        echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
        echo "cluster_endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT

  # Job 4: Deploy to Kubernetes
  deploy:
    runs-on: ubuntu-latest
    needs: [build, terraform]
    if: github.ref == 'refs/heads/main' && github.event.inputs.action != 'destroy'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Update deployment image
      run: |
        # Update the image in deployment.yaml with the built image
        sed -i 's|image: .*|image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest|' k8s/deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/deployment1 --timeout=300s

    - name: Get service information
      run: |
        echo "Deployment status:"
        kubectl get deployments
        echo "Service status:"
        kubectl get services
        echo "Pod status:"
        kubectl get pods
        
        # Get the LoadBalancer URL
        echo "Waiting for LoadBalancer to be ready..."
        kubectl wait --for=condition=Ready pods -l app=microservice --timeout=300s
        
        # Get external IP
        EXTERNAL_IP=""
        while [ -z $EXTERNAL_IP ]; do
          echo "Waiting for external IP..."
          EXTERNAL_IP=$(kubectl get svc microservice-svc --template="{{range .status.loadBalancer.ingress}}{{.hostname}}{{.ip}}{{end}}")
          [ -z "$EXTERNAL_IP" ] && sleep 10
        done
        echo "External IP/Hostname: $EXTERNAL_IP"
        echo "Application URL: http://$EXTERNAL_IP"

    - name: Run health check
      run: |
        # Wait a bit for the service to be fully ready
        sleep 30
        
        # Get the external endpoint
        EXTERNAL_IP=$(kubectl get svc microservice-svc --template="{{range .status.loadBalancer.ingress}}{{.hostname}}{{.ip}}{{end}}")
        
        if [ ! -z "$EXTERNAL_IP" ]; then
          echo "Testing application health..."
          curl -f http://$EXTERNAL_IP/live || echo "Health check failed"
          curl -f http://$EXTERNAL_IP/ready || echo "Ready check failed"
        else
          echo "External IP not available yet"
        fi
